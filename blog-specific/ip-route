#!/bin/bash

### BEGIN CONFIG ###

CONF_DIR=$(dirname $0)/../conf

IPV6_SOCKS_ENABLE=${IPV6_SOCKS_ENABLE:-false}
IPV6_SOCKS_SCRIPT=$(dirname $0)/ipv6-tun2socks
IPV6_GRE_TUNNEL_ENABLE=${IPV6_GRE_TUNNEL_ENABLE:-true}
IPV6_BLACKLIST_ENABLE=${IPV6_BLACKLIST_ENABLE:-true}

DEFAULT_ABROAD_TUNNEL=${DEFAULT_ABROAD_TUNNEL:-true}
BLOCKED_IP_ABROAD_TUNNEL=${BLOCKED_IP_ABROAD_TUNNEL:-false}

IPV4_SOCKS_SCRIPT=$(dirname $0)/ipv4-tun2socks
IPV4_SOCKS_ENABLE=${IPV4_SOCKS_ENABLE:-false}
IPV4_GRE_TUNNEL_ENABLE=${IPV4_GRE_TUNNEL_ENABLE:-true}

### END CONFIG ###

pushd $CONF_DIR >/dev/null
if [ ! -f "USTC.txt" ]; then
    echo "CIDR files not exist"
    exit 1
fi

function set_route() {
    gw=$1
    tableid=$2
    (echo "route flush table $tableid"; sed 's/\([ ;#].*\)//g;/^$/d' | awk "{printf(\"route replace %s via $gw table $tableid\n\", \$1); }") | ip -batch -
}

# set up IP-in-IP tunnel
ip tunnel del tunipip
ip tunnel add tunipip mode ipip local 202.141.160.99 remote 202.38.95.110
ip link set tunipip up
ip addr add 10.38.160.99/32 dev tunipip
ip route replace 10.38.95.110/32 dev tunipip

ip tunnel del tunipip2
ip tunnel add tunipip2 mode ipip local 202.141.176.99 remote 202.141.176.110
ip link set tunipip2 up
ip addr add 10.141.176.99/32 dev tunipip2
ip route replace 10.141.176.110/32 dev tunipip2

# define routing table preference (high to low)
route_pref="mirrors_mobile ustc cernet mobile telecom chnroutes whitelist blocked"

counter=10000
for i in $route_pref; do
    counter=$(($counter+1))
    eval $i=$counter
done

# generate routing tables
cat mirrors-mobile.txt | set_route 10.141.176.110 $mirrors_mobile
cat USTC.txt | set_route 202.141.160.126 $ustc
cat CHINANET.txt CNC.txt google.txt | set_route 202.141.160.126 $telecom
#cat CMCC.txt | set_route 202.141.176.126 $mobile
echo "" | set_route 202.141.176.126 $mobile
cat CERNET.txt | set_route 10.38.95.110 $cernet
cat chnroutes.txt abroad-telecom.txt | set_route 202.141.160.126 $chnroutes
cat paper-sites.txt | set_route 202.141.176.126 $whitelist

# set up ip rule
counter=10000
for i in $route_pref; do
    counter=$(($counter+1))
    origpref=$(ip rule | grep "from all lookup $counter" | awk 'BEGIN{FS=":"}{print $1}')
    if [ ! -z "$origpref" ]; then
        ip rule del from all lookup $counter pref $origpref
    fi
    ip rule add from all lookup $counter pref $counter
done

while true; do
    counter=$(($counter+1))
    origpref=$(ip rule | grep "from all lookup $counter" | awk 'BEGIN{FS=":"}{print $1}')
    [ -z "$origpref" ] && break
    ip rule del from all lookup $counter pref $origpref
done

# IPv6 route
cat chnroutes-v6.txt | while read prefix comment; do
    ip -6 route add $prefix via 2001:da8:d800:f001::1    2>/dev/null
done

popd >/dev/null

function gre_replace() {
    tunnel=$1
    real_local=$2
    real_remote=$3
    real_gw=$4
    virt_local=$5

    ip route replace $real_remote/32 via $real_gw
    if [ -z "$(ip tunnel show $tunnel)" ]; then
        ip tunnel add $tunnel mode gre remote $real_remote local $real_local ttl 255
    else
        ip tunnel change $tunnel mode gre remote $real_remote local $real_local ttl 255
    fi
    ip link set $tunnel up
    ip addr add $virt_local dev $tunnel
}

if [ -x "$IPV6_SOCKS_SCRIPT" ] && $IPV6_SOCKS_ENABLE; then
    echo "IPv6 tun2socks initializing"
    $IPV6_SOCKS_SCRIPT
    cat $CONF_DIR/blacklist-v6.txt | while read prefix comment; do
        ip -6 route add unreachable $prefix 2>/dev/null
    done
elif $IPV6_GRE_TUNNEL_ENABLE; then
    echo "Abroad IPv6 go through GRE tunnel"
    gre_replace do2 202.141.176.99 128.199.170.5 202.141.176.126 fdfe:dcba:9876::2/112
    if $IPV6_BLACKLIST_ENABLE; then
        cat $CONF_DIR/blacklist-v6.txt | while read prefix comment; do
            ip -6 route add unreachable $prefix 2>/dev/null
        done
    else
        cat $CONF_DIR/blacklist-v6.txt | while read prefix comment; do
            ip -6 route del unreachable $prefix 2>/dev/null
        done
    fi
    ip -6 route del 2000::/3    2>/dev/null
    ip -6 route add 2000::/3 via fdfe:dcba:9876::1
else
    echo "Disable abroad IPv6"
    ip -6 route del 2000::/3    2>/dev/null
    ip -6 route add unreachable 2000::/3    2>/dev/null
fi

localip="202.141.176.99"
gw="202.141.176.126"
if [ -x "$IPV4_SOCKS_SCRIPT" ] && $IPV4_SOCKS_ENABLE; then
    echo "IPv4 tun2socks initializing"
    $IPV4_SOCKS_SCRIPT
    if $DEFAULT_ABROAD_TUNNEL; then
        ip route replace default via 10.0.1.1
        ip route flush table $blocked
    else
        cat $CONF_DIR/blocked-ip.txt | set_route 10.0.1.1 $blocked
    fi
elif $IPV4_GRE_TUNNEL_ENABLE; then
    echo "Abroad IPv4 go though GRE tunnel"
    if $DEFAULT_ABROAD_TUNNEL; then
        echo "Default abroad IPv4 via tunnel"
        #gre_replace do1 $localip 128.199.237.96 $gw 10.0.2.2/30
        gre_replace do2 $localip 128.199.170.5 $gw 10.0.2.2/30
        ip route replace default via 10.0.2.1 dev do2
    else
        ip route replace default via $gw
    fi
    if $BLOCKED_IP_ABROAD_TUNNEL; then
        echo "Blocked IPv4 via a second tunnel"
        gre_replace do1 $localip 128.199.237.96 $gw 10.0.3.2/30
        cat $CONF_DIR/blocked-ip.txt | set_route 10.0.3.1 $blocked
    else
        ip route flush table $blocked
    fi
else
    echo "No available tunnel for abroad IP"
    ip route replace default via $gw
fi

exit 0
