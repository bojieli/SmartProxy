#!/bin/bash

### BEGIN CONFIG ###

CONF_DIR=$(dirname $0)/../conf

IPV6_SOCKS_ENABLE=${IPV6_SOCKS_ENABLE:-false}
IPV6_SOCKS_SCRIPT=$(dirname $0)/ipv6-tun2socks
IPV6_GRE_TUNNEL_ENABLE=${IPV6_GRE_TUNNEL_ENABLE:-true}
# IPv6 blacklist only for HTTP/HTTPS, use ip6tables instead
IPV6_BLACKLIST_ENABLE=${IPV6_BLACKLIST_ENABLE:-false}

DEFAULT_ABROAD_TUNNEL=${DEFAULT_ABROAD_TUNNEL:-true}
BLOCKED_IP_ABROAD_TUNNEL=${BLOCKED_IP_ABROAD_TUNNEL:-true}

IPV4_SOCKS_SCRIPT=$(dirname $0)/ipv4-tun2socks
IPV4_SOCKS_ENABLE=${IPV4_SOCKS_ENABLE:-false}
IPV4_GRE_TUNNEL_ENABLE=${IPV4_GRE_TUNNEL_ENABLE:-true}

PUBLIC_IP="202.141.176.95"
PUBLIC_GW="202.141.176.126"

### END CONFIG ###

pushd $CONF_DIR >/dev/null
if [ ! -f "USTC.txt" ]; then
    echo "CIDR files not exist"
    exit 1
fi

function set_route() {
    gw=$1
    tableid=$2
    (echo "route flush table $tableid"; sed 's/\([ ;#].*\)//g;/^$/d' | awk "{printf(\"route replace %s via $gw table $tableid\n\", \$1); }") | ip -batch -
}

function disable_route() {
    tableid=$1
    (echo "route flush table $tableid"; sed 's/\([ ;#].*\)//g;/^$/d' | awk "{printf(\"route add unreachable %s table $tableid\n\", \$1); }") | ip -batch -
}

function set_route6() {
    gw=$1
    tableid=$2
    (echo "route flush table $tableid"; sed 's/\([ ;#].*\)//g;/^$/d' | awk "{printf(\"route replace %s via $gw table $tableid\n\", \$1); }") | ip -6 -batch -
}

function disable_route6() {
    tableid=$1
    (echo "route flush table $tableid"; sed 's/\([ ;#].*\)//g;/^$/d' | awk "{printf(\"route add unreachable %s table $tableid\n\", \$1); }") | ip -6 -batch -
}

echo "set up CERNET tunnel..."
ip tunnel del gre_cernet
ip tunnel add gre_cernet mode gre local 202.141.160.95 remote 202.38.93.95 ttl 255
ip link set gre_cernet up
ip addr flush dev gre_cernet
ip addr add 10.0.160.95/32 dev gre_cernet
ip route replace 10.0.93.95/32 dev gre_cernet
# encapsulated packets from gre_cernet must go through telecom interface
ip route replace 202.38.93.95/32 via 202.141.160.126 table 1002


echo "set up CERNET backup tunnel..."
ip tunnel del gre_cernet_backup
ip tunnel add gre_cernet_backup mode gre local 202.141.176.95 remote 222.195.92.141 ttl 255
ip link set gre_cernet_backup up
ip addr flush dev gre_cernet_backup
ip addr add 10.25.25.2/32 dev gre_cernet_backup
ip route replace 10.25.25.1/32 dev gre_cernet_backup table 1002

# define routing table preference (high to low)
route_pref="mirrors_mobile ustc cernet mobile telecom chnroutes whitelist"

counter=10000
for i in $route_pref; do
    counter=$(($counter+1))
    eval $i=$counter
done
counter=$(($counter+1))
blocked=20000

echo "generate routing tables..."
#cat mirrors-mobile.txt | set_route 10.141.176.110 $mirrors_mobile
cat USTC.txt | set_route 202.141.176.126 $ustc
cat CERNET.txt | set_route 10.0.93.95 $cernet
cat CHINANET.txt CNC.txt google.txt | set_route 202.141.160.126 $telecom
#cat CMCC.txt | set_route 202.141.176.126 $mobile
echo "" | set_route 202.141.176.126 $mobile
cat chnroutes.txt abroad-telecom.txt | set_route 202.141.160.126 $chnroutes
cat paper-sites.txt | set_route 202.141.176.126 $whitelist

echo "set up ip rule..."
counter=10000
for i in $route_pref; do
    counter=$(($counter+1))
    origpref=$(ip rule | grep "from all lookup $counter" | awk 'BEGIN{FS=":"}{print $1}')
    if [ ! -z "$origpref" ]; then
        ip rule del from all lookup $counter pref $origpref
    fi
    ip rule add from all lookup $counter pref $counter
done

while true; do
    counter=$(($counter+1))
    origpref=$(ip rule | grep "from all lookup $counter" | awk 'BEGIN{FS=":"}{print $1}')
    [ -z "$origpref" ] && break
    ip rule del from all lookup $counter pref $origpref
done

echo "set up IPv6 route..."
cat chnroutes-v6.txt paper-sites-v6.txt | set_route6 2001:da8:d800:f001::1 10000
ip -6 rule del from all lookup 10000 pref 10000 2>/dev/null
ip -6 rule add from all lookup 10000 pref 10000

function gre_replace() {
    tunnel=$1
    real_local=$2
    real_remote=$3
    real_gw=$4
    virt_local=$5

    ip route replace $real_remote/32 via $real_gw
    if [ -z "$(ip tunnel show $tunnel)" ]; then
        ip tunnel add $tunnel mode gre remote $real_remote local $real_local ttl 255
    else
        ip tunnel change $tunnel mode gre remote $real_remote local $real_local ttl 255
    fi
    ip link set $tunnel up
    ip addr add $virt_local dev $tunnel 2>/dev/null  # if duplicate, do not show warning
}

pref_restrict_port=$counter
counter=$(($counter+1))

if [ -x "$IPV6_SOCKS_SCRIPT" ] && $IPV6_SOCKS_ENABLE; then
    echo "IPv6 tun2socks initializing"
    $IPV6_SOCKS_SCRIPT
elif $IPV6_GRE_TUNNEL_ENABLE; then
    echo "Abroad IPv6 go through GRE tunnel"
    cat gre-tunnels.txt | while read name ip subnet options; do
        if [[ "$options" =~ "v6" ]]; then
            echo "add v6 gre tunnel $name"
            gre_replace $name 202.141.176.95 $ip 202.141.176.126 fdfe:dcba:9876::$subnet:2/126
        fi
    done

    # table $blocked will be flushed. default gateway should be added after.
    if $IPV6_BLACKLIST_ENABLE; then
    	cat blacklist-v6.txt | disable_route6 $blocked
    else
    	ip -6 route flush table $blocked
    fi

    # clear rules
    ip -6 rule del pref $pref_restrict_port 2>/dev/null
    ip -6 rule del pref $pref_restrict_port 2>/dev/null

    ipv6_gw="fdfe:dcba:9876::10:1"
    ip -6 route add default via $ipv6_gw table $blocked
    ip -6 rule add fwmark 8080 lookup $blocked pref $pref_restrict_port
    # special ip rule for local outbound DNS traffic:
    # dport 53 to abroad IP always go through VPN
    ip -6 rule add fwmark 53 lookup $blocked pref $pref_restrict_port

    ip -6 route del 2000::/3    2>/dev/null
    ip -6 route add 2000::/3 via fdfe:dcba:9876::10:1 dev do
else
    echo "Disable abroad IPv6"
    ip -6 route del 2000::/3    2>/dev/null
    ip -6 route add unreachable 2000::/3    2>/dev/null
fi

if [ -x "$IPV4_SOCKS_SCRIPT" ] && $IPV4_SOCKS_ENABLE; then
    echo "IPv4 tun2socks initializing"
    $IPV4_SOCKS_SCRIPT
    if $DEFAULT_ABROAD_TUNNEL; then
        ip route replace default via 10.0.1.1
        ip route flush table $blocked
    else
        cat blocked-ip.txt | set_route 10.0.1.1 $blocked
    fi
elif $IPV4_GRE_TUNNEL_ENABLE; then
    echo "Abroad IPv4 go though GRE tunnel"
    if $DEFAULT_ABROAD_TUNNEL || $BLOCKED_IP_ABROAD_TUNNEL; then
        cat gre-tunnels.txt | while read name ip subnet options; do
            echo "add v4 gre tunnel $name"
            gre_replace $name $PUBLIC_IP $ip $PUBLIC_GW 10.0.$subnet.2/30
        done
        if $DEFAULT_ABROAD_TUNNEL; then
            echo "Default abroad IPv4 via tunnel"
            cat gre-tunnels.txt | while read name ip subnet options; do
                ip route replace default via 10.0.$subnet.1 table $(($blocked+$subnet))
            done
        else
            echo "Blocked IPv4 via tunnel"
            cat gre-tunnels.txt | while read name ip subnet options; do
                cat blocked-ip.txt | set_route 10.0.$subnet.1 $(($blocked+$subnet))
            done
        fi

        # clear rules
        while true; do
            ip rule del pref $pref_restrict_port 2>/dev/null || break
        done
        # add new rules
        fwmark_fwd_begin=8000
        cat gre-tunnels.txt | while read name ip subnet options; do
            ip rule add fwmark $(($fwmark_fwd_begin+$subnet)) lookup $(($blocked+$subnet)) pref $pref_restrict_port
        done

        # special ip rule for local outbound DNS traffic:
        # dport 53 to abroad IP always go through VPN
        fwmark_local_begin=5300
        cat gre-tunnels.txt | while read name ip subnet options; do
            ip route replace default via 10.0.$subnet.1 table $(($fwmark_local_begin+$subnet))
            ip rule add fwmark $(($fwmark_local_begin+$subnet)) lookup $(($fwmark_local_begin+$subnet)) pref $pref_restrict_port
        done
    else
        cat gre-tunnels.txt | while read name ip subnet options; do
            ip route flush table $(($blocked+$subnet))
        done
    fi
else
    echo "No available tunnel for abroad IP"
fi
ip route replace default via $PUBLIC_GW

popd >/dev/null

exit 0
