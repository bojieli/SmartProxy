#!/bin/bash

### BEGIN CONFIG ###

CONF_DIR=$(dirname $0)/../conf

IPV6_SOCKS_ENABLE=${IPV6_SOCKS_ENABLE:-false}
IPV6_SOCKS_SCRIPT=$(dirname $0)/ipv6-tun2socks
IPV6_GRE_TUNNEL_ENABLE=${IPV6_GRE_TUNNEL_ENABLE:-true}
IPV6_BLACKLIST_ENABLE=${IPV6_BLACKLIST_ENABLE:-true}

DEFAULT_ABROAD_TUNNEL=${DEFAULT_ABROAD_TUNNEL:-false}
BLOCKED_IP_ABROAD_TUNNEL=${BLOCKED_IP_ABROAD_TUNNEL:-true}
TCP_RESTRICT_PORTS=${TCP_RESTRICT_PORTS:-22,23,53,80,443,110,143,993,995}
UDP_RESTRICT_PORTS=${UDP_RESTRICT_PORTS:-53}

IPV4_SOCKS_SCRIPT=$(dirname $0)/ipv4-tun2socks
IPV4_SOCKS_ENABLE=${IPV4_SOCKS_ENABLE:-false}
IPV4_GRE_TUNNEL_ENABLE=${IPV4_GRE_TUNNEL_ENABLE:-true}

### END CONFIG ###

pushd $CONF_DIR >/dev/null
if [ ! -f "USTC.txt" ]; then
    echo "CIDR files not exist"
    exit 1
fi

function set_route() {
    gw=$1
    tableid=$2
    (echo "route flush table $tableid"; sed 's/\([ ;#].*\)//g;/^$/d' | awk "{printf(\"route replace %s via $gw table $tableid\n\", \$1); }") | ip -batch -
}

# set up IP-in-IP tunnel
ip tunnel del tunipip
ip tunnel add tunipip mode ipip local 202.141.160.99 remote 202.38.93.95
ip link set tunipip up
ip addr add 10.0.160.99/32 dev tunipip
ip route replace 10.0.93.95/32 dev tunipip

# define routing table preference (high to low)
route_pref="mirrors_mobile ustc cernet mobile telecom chnroutes whitelist"

counter=10000
for i in $route_pref; do
    counter=$(($counter+1))
    eval $i=$counter
done
counter=$(($counter+1))
blocked=$counter

# generate routing tables
cat mirrors-mobile.txt | set_route 10.141.176.110 $mirrors_mobile
cat USTC.txt | set_route 202.141.176.126 $ustc
cat CERNET.txt | set_route 10.0.93.95 $cernet
cat CHINANET.txt CNC.txt google.txt | set_route 202.141.160.126 $telecom
#cat CMCC.txt | set_route 202.141.176.126 $mobile
echo "" | set_route 202.141.176.126 $mobile
cat chnroutes.txt abroad-telecom.txt | set_route 202.141.160.126 $chnroutes
cat paper-sites.txt | set_route 202.141.176.126 $whitelist

# set up ip rule
counter=10000
for i in $route_pref; do
    counter=$(($counter+1))
    origpref=$(ip rule | grep "from all lookup $counter" | awk 'BEGIN{FS=":"}{print $1}')
    if [ ! -z "$origpref" ]; then
        ip rule del from all lookup $counter pref $origpref
    fi
    ip rule add from all lookup $counter pref $counter
done

while true; do
    counter=$(($counter+1))
    origpref=$(ip rule | grep "from all lookup $counter" | awk 'BEGIN{FS=":"}{print $1}')
    [ -z "$origpref" ] && break
    ip rule del from all lookup $counter pref $origpref
done

# IPv6 route
cat chnroutes-v6.txt | while read prefix comment; do
    ip -6 route add $prefix via 2001:da8:d800:f001::1 table 10000   2>/dev/null
done
ip -6 rule del from all lookup 10000 pref 10000 2>/dev/null
ip -6 rule add from all lookup 10000 pref 10000

popd >/dev/null

function gre_replace() {
    tunnel=$1
    real_local=$2
    real_remote=$3
    real_gw=$4
    virt_local=$5

    ip route replace $real_remote/32 via $real_gw
    if [ -z "$(ip tunnel show $tunnel)" ]; then
        ip tunnel add $tunnel mode gre remote $real_remote local $real_local ttl 255
    else
        ip tunnel change $tunnel mode gre remote $real_remote local $real_local ttl 255
    fi
    ip link set $tunnel up
    ip addr add $virt_local dev $tunnel
}

pref_restrict_port=$counter
counter=$(($counter+1))

function do_tunnel_restrict_ports() {
    cmd=$1
    for j in "-D" "-A"; do
        $1 -t mangle $j PREROUTING -m mark --mark 0 -p tcp -m multiport --dports $TCP_RESTRICT_PORTS -j MARK --set-mark 8080
        $1 -t mangle $j PREROUTING -m mark --mark 0 -p udp -m multiport --dports $UDP_RESTRICT_PORTS -j MARK --set-mark 8080
        $1 -t mangle $j PREROUTING -m mark --mark 0 -p icmp -j MARK --set-mark 8080
        $1 -t mangle $j PREROUTING -m mark --mark 0 -j MARK --set-mark 9090
    done
}

if [ -x "$IPV6_SOCKS_SCRIPT" ] && $IPV6_SOCKS_ENABLE; then
    echo "IPv6 tun2socks initializing"
    $IPV6_SOCKS_SCRIPT
    cat $CONF_DIR/blacklist-v6.txt | while read prefix comment; do
        ip -6 route add unreachable $prefix 2>/dev/null
    done
elif $IPV6_GRE_TUNNEL_ENABLE; then
    echo "Abroad IPv6 go through GRE tunnel"
    gre_replace do2 202.141.176.99 128.199.170.5 202.141.176.126 fdfe:dcba:9876::2/112
    do_tunnel_restrict_ports ip6tables
    # clear rules
    ip -6 rule del pref $pref_restrict_port 2>/dev/null
    ip -6 rule del pref $pref_restrict_port 2>/dev/null

    ipv6_gw="2001:da8:d800:f001::1"
    ip -6 route replace default via $ipv6_gw table $blocked
    ip -6 rule add fwmark 8080 lookup $blocked pref $pref_restrict_port
    # special ip rule for local outbound DNS traffic:
    # dport 53 to abroad IP always go through VPN
    ip -6 rule add fwmark 53 lookup $blocked pref $pref_restrict_port

    if $IPV6_BLACKLIST_ENABLE; then
        cat $CONF_DIR/blacklist-v6.txt | while read prefix comment; do
            ip -6 route add unreachable $prefix 2>/dev/null
        done
    else
        cat $CONF_DIR/blacklist-v6.txt | while read prefix comment; do
            ip -6 route del unreachable $prefix 2>/dev/null
        done
    fi
    ip -6 route del 2000::/3    2>/dev/null
    ip -6 route add 2000::/3 via fdfe:dcba:9876::1 dev do2
else
    echo "Disable abroad IPv6"
    ip -6 route del 2000::/3    2>/dev/null
    ip -6 route add unreachable 2000::/3    2>/dev/null
fi

localip="202.141.176.99"
gw="202.141.176.126"
if [ -x "$IPV4_SOCKS_SCRIPT" ] && $IPV4_SOCKS_ENABLE; then
    echo "IPv4 tun2socks initializing"
    $IPV4_SOCKS_SCRIPT
    if $DEFAULT_ABROAD_TUNNEL; then
        ip route replace default via 10.0.1.1
        ip route flush table $blocked
    else
        cat $CONF_DIR/blocked-ip.txt | set_route 10.0.1.1 $blocked
    fi
elif $IPV4_GRE_TUNNEL_ENABLE; then
    echo "Abroad IPv4 go though GRE tunnel"
    if $DEFAULT_ABROAD_TUNNEL || $BLOCKED_IP_ABROAD_TUNNEL; then
        gre_replace do2 $localip 128.199.170.5 $gw 10.0.2.2/30
        if $DEFAULT_ABROAD_TUNNEL; then
            echo "Default abroad IPv4 via tunnel"
            ip route replace default via 10.0.2.1 table $blocked
        else
            echo "Blocked IPv4 via tunnel"
            cat $CONF_DIR/blocked-ip.txt | set_route 10.0.2.1 $blocked
        fi

        do_tunnel_restrict_ports iptables
        # clear rules
        ip rule del pref $pref_restrict_port 2>/dev/null
        ip rule del pref $pref_restrict_port 2>/dev/null
        ip rule add fwmark 8080 lookup $blocked pref $pref_restrict_port
        # special ip rule for local outbound DNS traffic:
        # dport 53 to abroad IP always go through VPN
        ip route replace default via 10.0.2.1 table 53
        ip rule add fwmark 53 lookup 53 pref $pref_restrict_port
    else
        ip route flush table $blocked
    fi
else
    echo "No available tunnel for abroad IP"
fi
ip route replace default via $gw

exit 0
